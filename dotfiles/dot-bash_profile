# This script is ran when the Bash shell is launched as an interactive login
# shell. It is normally executed once and should probably source the `.bashrc`
# file, too.

# Source interactive shell script on startup, if it exists
# `-n` returns a boolean on whether the length of the string is non-zero, and
# `-r` returns a boolean on whether the file exists and is readable.
#
# TODO: `$BASH` may not always be pointing to the Bash executable. In some 
# insane instances, some [EXPLETIVE] may set the `$BASH` env variable to 
# something else. In most instances, this won't happen, though.
if [ -n "$BASH" ] && [ -r ~/.bashrc ]; then
    . ~/.bashrc
fi

# Read a list of programs that I'd like in my system. If the program exists, it
# will display the location/path and the version. This can be expanded to check
# the most recent version of the program and determine if the executable that 
# would be called is the correct one.
if [ -f ./.req_programs ]; then
    echo "Required programs list:"
    
    # Using `IFS` with `read` will allow setting a custom field delimiter to 
    # read values in a line. For instance, using IFS ':' with string 
    # 'hello:world' will be read twice, one variable 'hello' the other 'world'.
    # `IFS` isn't set here, since the file is single words per line.
    
    # Also, if reading more than one word, it might look something like this:
    # `IFS=, read -r prog_name prog_path`
    while read -r req_prog_line; do
        prog_path=$(command -v $req_prog_line)
        prog_len=${#prog_path}
        
        echo -n "  - $req_prog_line"
        for i in {$prog_len..20}; do
            echo -n "."
        done
        echo -n " "
        
        # Change the color of installed/not installed programs to green/red
        if [ prog_path = '' ]; then
            echo -e "\e[41mNOT INSTALLED\e[49m"
        else
            # Get first line to avoid license information from certain commands'
            # `--version` option
            prog_version=$($prog_path --version | head -n1)
            echo -e "\e[42mINSTALLED\e[49m - Version $prog_version @ '$prog_path'"
        fi
    done < ./.req_programs
else
    echo "The required programs file does not exist in the current directory: '$(pwd)'"
fi
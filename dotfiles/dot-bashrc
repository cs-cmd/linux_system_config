# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

###############################################################################
# Since `.bashrc` runs on every interactive shell, and is sourced by the 
# `.bash_profile` file, aliases, commands, functions, and other tools I need to
# do whatever job should be placed here.
#
# This section is dedicated to the tools I need to do my job. I will assess the
# changes I make to my systems in the future and determine if the declarations
# should be moved around. For now, these declarations will only be used in
# interactive shells.
###############################################################################
# returns a boolean on if the command exists
function command_exists()
{
    # `command -v <command>` will return a string representation of what is 
    # being called (like `which`). Use this and a comparison to a zero-length
    # string to determine if the command was found
    if [ -n "$(command -v $1)" ]; then
        return 0
    else
        return 1
    fi
}
# export -f command_exists

# Gets the path of the command
function get_command_path()
{
    # Bash functions don't return values like other languages' functions do.
    # Instead, Bash functions only return integers to denote exit codes. A
    # workaround is to call `echo`, which can then be assigned to a variable
    # (like `var=$(get_command_path "date")`
    echo -n "$(command -v $1)"
}
# export -f get_command_path

if command_exists "t"; then
    echo -n "ERR: Command 't' already exists on this system. Time shorthand "
    echo 'will NOT be set. '
    echo "Current 't' path........$(get_command_path 't')"
else
    alias t='date +"%I:%M %p // %A, %B %d, %Y"'
fi

function check_installed_programs()
{
    if [ ! -f "~/.req_programs" ];
    then
        echo "'~/.req_programs' does not exist; cannot test program" \
             "installation status."
        return 1
    fi

    # Using `IFS` with `read` will allow setting a custom field delimiter to 
    # read values in a line. For instance, using IFS ':' with string 
    # 'hello:world' will be read twice, one variable 'hello' the other 'world'.
    # `IFS` isn't set here, since the file is single words per line.

    # Also, if reading more than one word, it might look something like this:
    # `IFS=, read -r prog_name prog_path`
    while read -r req_prog_line; 
    do
        prog_path=$(command -v $req_prog_line)
        prog_len=${#prog_path}
        
        echo -n "  - $req_prog_line"
        # TODO: Find a cleaner way to write this
        for i in {$prog_len..20}; 
        do
            echo -n "."
        done
        echo -n " "
        
        # Change the color of installed/not installed programs to green/red
        if [ $prog_path = '' ]; then
            echo -e "\e[41mNOT INSTALLED\e[49m"
        else
            # Get first line to avoid license information from certain commands'
            # `--version` option
            prog_version=$($prog_path --version | head -n1)
            echo -e "\e[42mINSTALLED\e[49m - Version $prog_version" \
                    "@ '$prog_path'"
        fi
    done < ~/.req_programs

    return 0
}
###############################################################################
# END OF CUSTOM TOOLS
###############################################################################

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
